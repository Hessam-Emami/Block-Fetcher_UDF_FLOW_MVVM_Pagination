plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'androidx.navigation.safeargs'
    id 'dagger.hilt.android.plugin'
    id "io.gitlab.arturbosch.detekt"
    id 'kotlin-parcelize'
    id 'jacoco'
}

android {
    compileSdkVersion androidCompileSdkVersion
    buildToolsVersion androidBuildToolsVersion

    defaultConfig {
        applicationId "com.emami.blockfetcher"
        minSdkVersion androidMinSdkVersion
        targetSdkVersion androidTargetSdkVersion
        versionCode appVersionCode
        versionName appVersionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        //Ideally we can consider other approaches like using NDK for keeping sensitive data too
        buildConfigField("String", "CLIENT_ID", "\"RPRWWJ2JH3YMXUO3BFMP1GFPG4MYLD2M322LNMG5CWS3IHTC\"")
        buildConfigField("String", "CLIENT_SECRET", "\"YZC04XS42PDXJHV3NGASUF1YOUTP4XTXZXHOL03HMU4YBJMY\"")
        buildConfigField "String", "BASE_URL", "\"https://api.foursquare.com/\""
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile(
                    'proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
        coreLibraryDesugaringEnabled true
    }

    kotlinOptions {
        jvmTarget = '1.8'
        freeCompilerArgs += ["-Xopt-in=kotlin.RequiresOptIn", "-Xopt-in=androidx.paging.ExperimentalPagingApi"]
    }

    packagingOptions {
        exclude "DebugProbesKt.bin"
    }

    testOptions {
        unitTests.returnDefaultValues = true
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
            }
        }
    }

    buildFeatures {
        viewBinding true
    }
}

dependencies {
    implementation libraries.kotlinStdLib
    implementation libraries.ktxCore
    implementation libraries.appCompat
    implementation libraries.constraintLayout
    implementation libraries.legacySupport
    implementation libraries.materialDesign
    implementation libraries.glide
    implementation libraries.fragment
    implementation libraries.activityKtx
    implementation libraries.playServicesLocation


    implementation libraries.retrofit
    implementation libraries.loggingInterceptor
    implementation libraries.dagger
    implementation libraries.daggerHilt
    implementation libraries.daggerHiltAndroid
    implementation libraries.timber
    implementation libraries.coroutineCore
    implementation libraries.coroutineAndroid
    implementation libraries.coroutineCallAdapter
    implementation libraries.gson
    implementation libraries.gsonConverterFactory

    coreLibraryDesugaring libraries.jdkDesugar

    //Jetpack
    implementation archComponentLibraries.navFragment
    implementation archComponentLibraries.navUi
    implementation archComponentLibraries.lifecycleViewModel
    implementation archComponentLibraries.lifecyclerLiveData
    implementation archComponentLibraries.lifecycleRuntime
    implementation archComponentLibraries.room
    implementation archComponentLibraries.roomKtx
    implementation archComponentLibraries.paging

    //Kapt
    kapt libraries.daggerCompiler
    kapt libraries.daggerHiltCompiler
    kapt libraries.daggerHiltAndroidCompiler
    kapt archComponentLibraries.roomCompiler
    kapt libraries.glideCompiler

    //Test
    testImplementation testLibraries.junit4
    testImplementation testLibraries.mockito
    testImplementation testLibraries.archCoreTesting
    testImplementation testLibraries.coroutineTest
    testImplementation testLibraries.roboElectric
    testImplementation testLibraries.junit4
    testImplementation testLibraries.androidXextJunit
    testImplementation testLibraries.androidXCoreKtx
    testImplementation testLibraries.androidXextJunit
    testImplementation testLibraries.mockWebServer
    testImplementation testLibraries.faker

    androidTestImplementation testLibraries.androidXextJunit
    androidTestImplementation testLibraries.espresso_core
    androidTestImplementation 'androidx.test:runner:1.3.0'
    androidTestImplementation 'androidx.test:rules:1.3.0'

    detektPlugins buildPlugins.detektFormatting
}

//Detekt  ###################################################################################################################
detekt {
    failFast = true // fail build on any finding
    buildUponDefaultConfig = true // preconfigure defaults
    config = files("$projectDir/config/detekt.yml")

    reports {
        html.enabled = true // observe findings in your browser with structure and code snippets
        xml.enabled = true // checkstyle like format mainly for integrations like Jenkins
        txt.enabled = true
        // similar to the console output, contains issue signature to manually edit baseline files
    }
}
tasks.detekt.jvmTarget = "1.8"

//Jacoco  ###################################################################################################################

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest']) {
    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class',
                      '**/R$*.class',
                      '**/BuildConfig.*',
                      '**/*$ViewInjector*.*',
                      '**/Manifest*.*',
                      '**/*Test*.*',
                      'android/**/*.*',
                      '**/data/models/*']
    def debugTree = fileTree(dir: "${buildDir}/tmp/kotlin-classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories.setFrom(files([mainSrc]))
    classDirectories.setFrom(files([debugTree]))
    executionData.setFrom(fileTree(dir: "$buildDir", includes: [
            "jacoco/testDebugUnitTest.exec",
            "outputs/code-coverage/connected/*coverage.ec"
    ]))

}